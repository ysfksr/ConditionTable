@model RuleViewModel



<div id="RuleTableDivider">
    @if (Model.ErrorMessage != null)
    {
        <p class="noteBoxes type2">@Model.ErrorMessage</p>
    }
    <table id="ruleTable">
        <thead>
            <tr>
                <th>Interval</th>
                <th>Result</th>
                <th>Delete/Edit</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null)
            {
                foreach (var item in Model.Rules)
                {
                    <tr>
                        <td>@item.Interval</td>
                        <td> <a id="@item.Id">@item.Result</a></td>
                        <td>

                            @if (!item.Interval.Contains("∞"))
                            {
                                <a class="btn btn-primary" id="btnDelete" href="/Condition/Delete/@item.Id">x</a>
                            }
                            <a class="btn btn-outline-primary" data="/Condition/Edit/@item.Id">Edit</a>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    @if (Model != null && Model.Rules.Any())
    {
        <div align="right" style="width:80%;margin-top:10px;">
            <form asp-action="TruncateTable" asp-controller="Condition" method="get">
                <button type="submit" class="btn btn-outline-danger" id="truncateTable">Truncate The Table</button>
            </form>
        </div>
    }
    <p class="noteBoxes type3">Do not forget setting the result ​​of the intervals leading to plus infinity and minus infinity.</p>
</div>

<script>
    $(".btn-outline-primary").click(function () {
        var url = $(this).attr('data');
        $.ajax({
            url: url,
            method: 'GET',
            contentType: 'application/json',
            success: function (response) {
                console.log(response);
                $('#myModal').html(response);
                $('#myModal').modal('show');
            }
        });
    });
</script>
